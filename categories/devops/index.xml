<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>devops on 青云卷</title>
    <link>https://mydream.ink/categories/devops/</link>
    <description>Recent content in devops on 青云卷</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 09 Nov 2019 08:32:31 +0800</lastBuildDate><atom:link href="https://mydream.ink/categories/devops/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>自动化运维之自动构建</title>
      <link>https://mydream.ink/posts/devops/sonarqube-and-gitlab/</link>
      <pubDate>Sat, 09 Nov 2019 08:32:31 +0800</pubDate>
      
      <guid>https://mydream.ink/posts/devops/sonarqube-and-gitlab/</guid>
      <description>版本说明  gitlab: 11.4.5 sonarqube: 8.0-community-beta helm: v3.0.0-rc.2 sonar-gitlab-plugin: 4.1.0-SNAPSHOT chart: 3.2.2  预处理  可用的 ingress controller 域名：确保对应的域名sonar.example.com 能够访问到 ingress 已经有 gitlab，并且配置好了一个全局可用的 Kubernetes 环境的 runner  安装 sonarqube 没有已经存在的数据库用于相关数据存取，所以在安装 sonarqube 的同时，还将根据依赖安装 postgresql。
自定义变量 进入stable/sonarqube，创建 custom.yaml 文件：
image: tag: 8.0-community-beta ingress: enabled: true hosts: - name: sonar.example.com annotations: kubernetes.io/ingress.class: nginx # 选择指定的 ingress controller cert-manager.io/cluster-issuer: letsencrypt-stagging # 使用提前创建好的可用的 Issue/ClusterIssue acme.cert-manager.io/http01-edit-in-place: &amp;#34;true&amp;#34; # 颁发证书时依托原原有的 ingress 而不新建 tls: - hosts: - sonar.example.com secretName: sonar-tls persistence: enabled: true accessMode: ReadWriteOnce size: 10Gi plugins: install: # 预装 sonar-gitlab-plugin 插件 - &amp;#34;https://github.</description>
    </item>
    
    <item>
      <title>自动化运维之自动构建</title>
      <link>https://mydream.ink/posts/devops/auto-devops-auto-build/</link>
      <pubDate>Sun, 08 Sep 2019 18:37:36 +0800</pubDate>
      
      <guid>https://mydream.ink/posts/devops/auto-devops-auto-build/</guid>
      <description>本文供自己记录学习，我会尽量保证文章准确无误，但因本人水平有限，如果不幸产生任何错误，望读者不吝赐教。
浅析 gitlab-runner 相关配置 在 gitlab-runner 中每个 runner 都需要指定 executor，executor 有以下几种类型：
 SSH Shell Parallels VirtualBox Docker Docker Machine (auto-scaling) Kubernetes Custom  我们会将 gitlab-runner 部署在 kubernetes 集群中，所以此处选用 kubernetes 作为 executor。有关该 executor 的配置方式，在官方文档中有详细说明，此处就此次配置所需要的进行简单说明，其它的再视情况进行补充。
与其它类型的 executor 一样，kubernetes 也需要根据 gitlab 仓库的 url 和 token 对 runner 进行注册方可使用。注册后会有一个常驻的 pod （我姑且叫它 runner 服务端）对来自于 gitlab 的 pipeline 任务进行监听，当监听到有新的任务需要执行时，就会创建新的 pipeline 跑 .gitlab-ci.yml 上对应的job。所以 runner 服务端相关联的 ServieAccount 一定需要具备对应的 namespace 的 pod 的创建的权限。
配置一个 runner 有多种方式，包括启动参数、环境变量、配置文件等。这其中配置文件的功能最强，参数可配置项较环境变量稍多（或许它们具有相同的能力，只是我没有发现，如果你知道欢迎帮忙补充）。通过gitlab-runner help register命令我们可以找到所有的启动参数和环境变量，参数与环境变量之间的关系请参照参数与环境变量对照表。</description>
    </item>
    
  </channel>
</rss>
