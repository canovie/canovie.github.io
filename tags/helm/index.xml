<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Helm on 青云卷</title>
    <link>https://mydream.ink/tags/helm/</link>
    <description>Recent content in Helm on 青云卷</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 07 Jul 2019 08:42:53 +0800</lastBuildDate><atom:link href="https://mydream.ink/tags/helm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Helm的安装和使用</title>
      <link>https://mydream.ink/archive/about-the-installation-and-use-of-helm/</link>
      <pubDate>Sun, 07 Jul 2019 08:42:53 +0800</pubDate>
      
      <guid>https://mydream.ink/archive/about-the-installation-and-use-of-helm/</guid>
      <description>Helm 可以理解为 Kubernetes 的包管理工具，可以方便地发现、共享和使用为Kubernetes构建的应用。
一、基本概念   Helm的三个基本概念
 Chart：Helm应用（package），包括该应用的所有Kubernetes manifest模版，类似于YUM RPM或Apt dpkg文件 Repository：Helm package存储仓库 Release：chart的部署实例，每个chart可以部署一个或多个release    Helm工作原理
Helm包括两个部分，helm客户端和tiller服务端。
the client is responsible for managing charts, and the server is responsible for managing releases.
  helm客户端
helm客户端是一个命令行工具，负责管理charts、reprepository和release。它通过gPRC API（使用kubectl port-forward将tiller的端口映射到本地，然后再通过映射后的端口跟tiller通信）向tiller发送请求，并由tiller来管理对应的Kubernetes资源。
Helm客户端的使用方法参见Helm命令。
  tiller服务端
tiller接收来自helm客户端的请求，并把相关资源的操作发送到Kubernetes，负责管理（安装、查询、升级或删除等）和跟踪Kubernetes资源。为了方便管理，tiller把release的相关信息保存在kubernetes的ConfigMap中。
tiller对外暴露gRPC API，供helm客户端调用。
  二、安装 环境：kubernetes 1.7 + helm 2.5.0
  客户端安装：
下载相应的版本：https://github.com/kubernetes/helm/releases
解压
tar -zxvf helm-v2.5.0-linux-amd64.tgz 把helm执行文件放置在：
mv linux-amd64/helm /usr/local/bin/helm From there, you should be able to run the client: helm help.</description>
    </item>
    
  </channel>
</rss>
